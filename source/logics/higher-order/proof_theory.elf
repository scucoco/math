%namespace "http://latin.omdoc.org/logics/proof_theory".
%namespace syn = "syntax".

%* base logic *%
%sig HOL = {
  %include syn.HOL %open ==.

  eqrefl : ⊦ T == T.
  eqsym  : ⊦ S == T -> ⊦ T == S.
  eqtrans : ⊦ (A: tm K) == B -> ⊦ B == C -> ⊦ A == C.
  eqapp  : ⊦ F == G -> ⊦ S == T -> ⊦ (F @ S) == (G @ T).
  eqλ    : ({x: tm A} ⊦ (T x) == (S x)) -> ⊦ λ ([x: tm A] T x) == λ ([x: tm A] S x).  %% also called xi
  eq⊦    : ⊦ F == G -> ⊦ F -> ⊦ G.

  beta   : ⊦ (λ [x: tm A] T x) @ S == (T S).

  betao  : ⊦ F X  -> ⊦ (λ F) @ X = [p] (eq⊦ (eqsym beta) p).
  betai  : ⊦ (λ F) @ X -> ⊦ F X = [p] eq⊦ beta p.
  doublebetao : ⊦ F A B -> ⊦ (λ [x] (λ [y] (F x y))) @ A @ B
             = [p: ⊦ F A B]
                eq⊦ (eqsym (eqapp beta eqrefl))
                   (betao p).
  doublebetai : ⊦ (λ [x] (λ [y] (F x y))) @ A @ B -> ⊦ F A B
                  = [p: ⊦ (λ [x] (λ [y] (F x y))) @ A @ B]
                    eq⊦ beta (eq⊦ (eqapp beta eqrefl) p).
  eqtrans3 : ⊦ A == B -> ⊦ B == C -> ⊦ C == D -> ⊦ A == D = [p][q][r] eqtrans (eqtrans p q) r.
  eqcongF : {F: tm A -> tm B} ⊦ X == Y -> ⊦ (F X) == (F Y)
          = [F][p] eqtrans3 (eqsym beta) (eqapp (eqrefl : ⊦ λ F == λ F) p) beta.
  eqcongP : {F: tm A -> tm o} ⊦ X == Y -> ⊦ F X -> ⊦ F Y
          = [F][p][q] eq⊦ (eqcongF F p) q.
  %abbrev leibnizI : ({F: tm A -> tm o} ⊦ F X -> ⊦ F Y) -> ⊦ X == Y = [p] p ([u] X == u) eqrefl.
  leibnizE : ⊦ X == Y -> {F: tm A -> tm o} ⊦ F X -> ⊦ F Y = [p][F][q] eqcongP F p q.

  beta2  : ⊦ (λ [x] (λ [y] (F x y))) @ A @ B == F A B
         = eqtrans (eqcongF ([f] f @ B) beta) beta.
  eqλrev : ⊦ λ ([x: tm A] T x) == λ ([x: tm A] S x) -> ({x: tm A} ⊦ (T x) == (S x))
    = [p: ⊦ λ ([x: tm A] T x) == λ ([x: tm A] S x)] [x: tm A]
      eqtrans3 (eqsym beta) (eqapp p eqrefl) beta.
}.

%* equality on booleans is equivalence
   this makes the truth values an ordering under provability *%
%sig PropositionalExtensionality = {
  %include HOL %open ==.
  eqI    : (⊦ F -> ⊦ G) -> (⊦ G -> ⊦ F) -> ⊦ (F == G).
  top_unique : ⊦ F -> ⊦ G -> ⊦ F == G = [p][q] eqI ([_] q) ([_] p).
}.

%sig PrawitzHOL = {
  %include syn.PrawitzHOL %open ==.
  ∀I : ({x: tm A} ⊦ F x) -> ⊦ ∀ ([x: tm A] F x).         
  ∀E : ⊦ ∀ ([x: tm A] F x) -> {x: tm A} ⊦ F x.

  ⇒I  : (⊦ A -> ⊦ B) -> ⊦ A ⇒ B.
  ⇒E  : ⊦ A ⇒ B -> ⊦ A -> ⊦ B.
  
  cong_meta : A funtypes.level.== B -> ⊦ A -> ⊦ B.
  betai  : ⊦ (λ F) @ X -> ⊦ F X = [p] cong_meta funtypes.beta p.
  betao  : ⊦ F X  -> ⊦ (λ F) @ X = [p] cong_meta (funtypes.level.sym funtypes.beta) p.
  %abbrev leibnizI : ({F: tm A -> tm o} ⊦ F X -> ⊦ F Y) -> ⊦ X == Y
     = [p] ∀I [f] ⇒I [q: ⊦ f @ X] p ([x] f @ x) q.
  leibnizE : ⊦ X == Y -> {F: tm A -> tm o} ⊦ F X -> ⊦ F Y
     = [p][F][q] betai (⇒E (∀E p (λ F)) (betao q)).
}.

%sig LeibnizHOL = {
  %include syn.HOL %open ==.
  eq_meta : A funtypes.level.== B -> ⊦ A == B.

  leibnizI : ({F: tm A -> tm o} ⊦ F X -> ⊦ F Y) -> ⊦ X == Y.
  leibnizE : ⊦ X == Y -> {F: tm A -> tm o} ⊦ F X -> ⊦ F Y.

  eq⊦ : ⊦ A == B -> ⊦ A -> ⊦ B = [p][q] leibnizE p ([u] u) q.

  eqrefl : ⊦ T == T = leibnizI [F][p] p.
  eqsym  : ⊦ S == T -> ⊦ T == S = [p] leibnizE p ([u] u == S) eqrefl.
  eqtrans : ⊦ X == Y -> ⊦ Y == Z -> ⊦ X == Z
      = [p][q] leibnizI [f][r] leibnizE q f (leibnizE p f r).
  eqapp  : ⊦ F == G -> ⊦ S == T -> ⊦ (F @ S) == (G @ T) = [p][q] leibnizE p ([u] F @ S == u @ T) (leibnizE q ([v] F @ S == F @ v) eqrefl).
  eqE    : ⊦ F == G -> ⊦ F -> ⊦ G = [p][q] leibnizE p ([x] x) q.
  eqcongF : {F: tm A -> tm o} ⊦ X == Y -> ⊦ F X == F Y
      = [F][p] leibnizI [f][q: ⊦ f (F X)] leibnizE p ([x] f (F x)) q.

  beta   : ⊦ (λ [x: tm A] T x) @ S == (T S) = eq_meta funtypes.beta.
  betao  : ⊦ F X  -> ⊦ (λ F) @ X = [p] (eqE (eqsym beta) p).
  betai  : ⊦ (λ F) @ X -> ⊦ F X = [p] eqE beta p.
  doublebetao : ⊦ F A B -> ⊦ (λ [x] (λ [y] (F x y))) @ A @ B
             = [p: ⊦ F A B]
                eqE (eqsym (eqapp beta eqrefl))
                   (betao p).
  doublebetai : ⊦ (λ [x] (λ [y] (F x y))) @ A @ B -> ⊦ F A B
                  = [p: ⊦ (λ [x] (λ [y] (F x y))) @ A @ B]
                    eqE beta (eqE (eqapp beta eqrefl) p).
}.